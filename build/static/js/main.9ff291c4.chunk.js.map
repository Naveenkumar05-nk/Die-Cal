{"version":3,"sources":["recipe.module.css","logo.svg","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","dietLabels","className","style","recipe","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","placeholder","type","value","onChange","target","map","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2ECD1DD,EAAOC,QAAU,IAA0B,kC,8JCkB5BC,EAfA,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,WACrC,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKN,GAEL,0CAAgBC,GAChB,4CAAkBE,GAGlB,yBAAKC,UAAWC,IAAMH,MAAMK,IAAKL,EAAOM,IAAI,OCsDzCC,EA7DH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAUhBC,qBAAU,WACVC,MACE,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,uEAAD,OAAwEL,EAAxE,mBAbf,WAae,oBAZd,qCAWG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAmBhB,OACE,yBAAKpB,UAAU,OACb,0BAAMuB,SATQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAMmBV,UAAU,eACnC,2BAAOA,UAAU,aAAa0B,YAAY,mBAAkBC,KAAK,OAAOC,MAAOnB,EAAQoB,SAfxE,SAAAL,GACnBd,EAAUc,EAAEM,OAAOF,UAeb,4BAAQ5B,UAAU,gBAAgB2B,KAAK,UAAvC,WAEL,yBAAK3B,UAAU,WACZO,EAAQwB,KAAI,SAAA7B,GAAM,OACnB,kBAAC,EAAD,CACA8B,IAAK9B,EAAOA,OAAO+B,MACnBrC,MAAOM,EAAOA,OAAO+B,MACrBpC,SAAUK,EAAOA,OAAOL,SACxBE,WAAYG,EAAOA,OAAOH,WAC1BD,MAAOI,EAAOA,OAAOJ,YAKvB,yBAAKE,UAAU,UACf,mEC7CekC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.9ff291c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__bTwsE\",\"image\":\"recipe_image__1yt5u\"};","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = ({title, calories, image, dietLabels}) =>{\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n           \r\n            <h3>Calories : {calories}</h3>\r\n            <h3>Diet Label : {dietLabels}</h3>\r\n\r\n           \r\n            <img className={style.image}src={image} alt=\"\"/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;\r\n\r\n","import React,{useEffect, useState} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Recipe from './Recipe';\r\n\r\nconst App = () => {\r\n\r\n  const APP_ID = \"428f83c4\";\r\n  const APP_KEY = \"ba9704b500c71aacf7eb82f667f613a0\";\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");             /* For the updation in the search bar*/\r\n  const [query, setQuery] = useState(\"chicken\");       /*To set a query in the search bar and created to stop the continous calling of the API*/\r\n  \r\n  \r\n  useEffect(() => {\r\n  getRecipes();                       /*this empty array at the last makes use effect to only render one time unless something is passed into it a parameter*/\r\n  },[query]);                          /* useEffect will run on when the query is been changed */\r\n\r\n  const getRecipes = async () => {\r\n    const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\r\n    const data = await response.json();\r\n    setRecipes(data.hits);\r\n    console.log(data.hits);\r\n  };\r\n\r\n  const updateSearch = e =>{\r\n    setSearch(e.target.value);\r\n                                               /*Event for searching things in the search bar*/\r\n  };\r\n\r\n  const getSearch = e =>{\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch(''); \r\n                                          /*To prevent the page reload*/\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={getSearch} className=\"search-form\">\r\n        <input className=\"search-bar\" placeholder=\"Type foody stuff\"type=\"text\" value={search} onChange={updateSearch} />\r\n          <button className=\"search-button\" type=\"submit\">Search</button>\r\n     </form>\r\n     <div className=\"recipes\">     \r\n       {recipes.map(recipe =>(\r\n       <Recipe \r\n       key={recipe.recipe.label}\r\n       title={recipe.recipe.label} \r\n       calories={recipe.recipe.calories}\r\n       dietLabels={recipe.recipe.dietLabels}\r\n       image={recipe.recipe.image}\r\n      />\r\n     ))}\r\n     \r\n     </div>\r\n     <div className=\"Footer\">\r\n     <p>Made with ‚ù§ by Naveen Jangid</p>\r\n\r\n     </div>\r\n     \r\n \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}